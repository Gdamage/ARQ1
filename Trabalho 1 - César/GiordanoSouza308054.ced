;Nome: Giordano Souza de Paula
;Cartao UFRGS: 00308054
;Carregar o kernel fornecido e realizar carga parcial no processador Cesar - dos endereços 256 até 16383!!!
ORG 256 ;Endereco de inicio do programa

;=======ENDERECOS AUXILIARES PARA JUMPS CONDICIONAIS FORA DA FAIXA PERMITIDA==========;

	
;=========================INICIO DO PROGRAMA PRINCIPAL================================;
LOOP_IDENTIFICACAO: ;Imprime a mensagem de identificacao na tela
	MOV #MSG_IDENTIFICACAO, R0 ;Coloca a string da mensagem 1 no R0
	MOV #putmsg, R5 ;Coloca o valor 3 no R5, indicando a operacao putmsg(R0)
	JSR R7, _SISTEMA ;Pula para a subrotina do sistema, onde a operacao solicitada é executada

JMP_WAIT_ENTER_0:
	MOV #getchar, R5 ;Coloca o valor 1 no R5, indicando a operacao R0=getchar()
	JSR R7, _SISTEMA ;Pula para a subrotina do sistema, onde a operacao solicitada é executada
	
	CMP #ENTER, R0 ;Compara o valor da tecla digitado com o valor da tecla enter (13 na tabela ASCII)
	BNE JMP_WAIT_ENTER_0 ;Se nao for a tecla enter, inicia o loop novamente
	JMP PEDE_NUM_PAREDE ;Pula o atalho
	
ATALHO_PEDE_NUM_PAREDE:
	CMP R0, #99
	BEQ PEDE_NUM_PAREDE
	CMP R0, #67
	BEQ PEDE_NUM_PAREDE
	JMP RETORNO_PEDE_NUM_PAREDE
ATALHO2_PEDE_NUM_PAREDE:
	CMP R0, #99
	BEQ PEDE_NUM_PAREDE
	CMP R0, #67
	BEQ PEDE_NUM_PAREDE
	JMP RETORNO2_PEDE_NUM_PAREDE
	
PEDE_NUM_PAREDE:
	JSR R7, DISPLAY_CLS
	JSR R7, ZERA_VARIAVEIS ;Zera algumas variaveis auxiliares
	
	MOV #MSG_ASKWALL, R0 ;Coloca a string da mensagem 2 no R0
	MOV #putmsg, R5 ;Coloca o valor 3 no R5, indicando a operacao putmsg(R0)
	JSR R7, _SISTEMA	
	
	;Pula o atalho para o local correto
	JMP SE_POS_INICIAL
	
	ATALHO_SE_POS_INICIAL:
		CMP R1, #28
		BLE SE_POS_INICIAL ;Se a posicao ja for a inicial...
		JMP RETORNO_SE_POS_INICIAL
	
	SE_POS_INICIAL:
	;Move o cursor para a posicao inicial - onde os numeros devem aparecer
	MOV #setcursor, R5
	MOV #28, R0
	JSR R7, _SISTEMA
	
	LOOP_DIGITA_PAREDE:
	CLR R0
	MOV #getchar, R5
	JSR R7, _SISTEMA
	
	CMP R0, #ENTER
	BEQ ANALISA_SOLICITACAO_PAREDE
	JMP ATALHO_CORRIGE_CARACTERE
	RETORNO_CORRIGE_CARACTERE:
	
	MOV #putchar, R5
	JSR R7, _SISTEMA
	
	JMP LOOP_DIGITA_PAREDE

ANALISA_SOLICITACAO_PAREDE:
	;Se o restante da tela tiver um caractere que for diferente de um espaco (ASCII 32) no terceiro caractere (maior que 99)
	JSR R7, VERIFICA_ERRO_PAREDE
	
	;Se nao houverem caracteres invalidos... analisa os primeiros 2 (00 a 99)
	JMP ATALHO_PAREDE_0ALGO
	RETORNO_PAREDE_0ALGO:
	
	CMP 65529, #32 ;Se o proximo caractere NAO for um espaco (nulo) e nao for invalido...)
	BNE SE_HOUVER_DIGITO_2
	;SE PASSAR DESSA LINHA SIGNIFICA QUE NAO EXISTE UM SEGUNDO DIGITO!!!!
	
	JMP SE_N_HOUVER_DIGITO_2
	
	SE_HOUVER_DIGITO_2:
	JMP ATALHO_PAREDE_10ALGO
	RETORNO_PAREDE_10ALGO:
	JMP ATALHO_PAREDE_20ALGO
	RETORNO_PAREDE_20ALGO:
	JMP ATALHO_PAREDE_30ALGO
	RETORNO_PAREDE_30ALGO:
	JMP ATALHO_PAREDE_40ALGO
	RETORNO_PAREDE_40ALGO:
	JMP ATALHO_PAREDE_50ALGO
	RETORNO_PAREDE_50ALGO:
	JMP ATALHO_PAREDE_60ALGO
	RETORNO_PAREDE_60ALGO:
	JMP ATALHO_PAREDE_70ALGO
	RETORNO_PAREDE_70ALGO:
	JMP ATALHO_PAREDE_80ALGO
	RETORNO_PAREDE_80ALGO:
	JMP ATALHO_PAREDE_90ALGO
	RETORNO_PAREDE_90ALGO:
	
	;Se nenhum desses casos, indica um erro desconhecido (caso o primeiro caractere seja diferente de 0 a 9, e tenha passado pela verificacao acima)
	JMP ERRO_DESCONHECIDO
	
	SE_N_HOUVER_DIGITO_2:
	JMP ATALHO_FIM_PROGRAMA
	RETORNO_FIM_PROGRAMA:
	CMP 65528, #49
	BEQ PAREDE_1
	CMP 65528, #50
	BEQ PAREDE_2
	CMP 65528, #51
	BEQ PAREDE_3
	CMP 65528, #52
	BEQ PAREDE_4
	CMP 65528, #53
	BEQ PAREDE_5
	CMP 65528, #54
	BEQ PAREDE_6
	CMP 65528, #55
	BEQ PAREDE_7
	JMP ATALHO_PAREDE_8
	RETORNO_PAREDE_8:
	JMP ATALHO_PAREDE_9
	RETORNO_PAREDE_9:
	
	;Se nenhum desses casos, indica um erro desconhecido (caso o primeiro caractere seja diferente de 0 a 9, e tenha passado pela verificacao acima)
	JMP ERRO_DESCONHECIDO
	
	MOV #0, TEMP_PAREDE
	
	PAREDE_1:
	MOV #1, TEMP_PAREDE
	MOV #49, PRIMEIRO_DIGITO
	JMP TESTE_SET_WALL
	PAREDE_2:
	MOV #2, TEMP_PAREDE
	MOV #50, PRIMEIRO_DIGITO
	JMP TESTE_SET_WALL
	PAREDE_3:
	MOV #3, TEMP_PAREDE
	MOV #51, PRIMEIRO_DIGITO
	JMP TESTE_SET_WALL
	PAREDE_4:
	MOV #4, TEMP_PAREDE
	MOV #52, PRIMEIRO_DIGITO
	JMP TESTE_SET_WALL
	PAREDE_5:
	MOV #5, TEMP_PAREDE
	MOV #53, PRIMEIRO_DIGITO
	JMP TESTE_SET_WALL
	PAREDE_6:
	MOV #6, TEMP_PAREDE
	MOV #54, PRIMEIRO_DIGITO
	JMP TESTE_SET_WALL
	PAREDE_7:
	MOV #7, TEMP_PAREDE
	MOV #55, PRIMEIRO_DIGITO
	JMP TESTE_SET_WALL
	ATALHO_PAREDE_8:
	CMP 65528, #56
	BEQ PAREDE_8
	JMP RETORNO_PAREDE_8
	PAREDE_8:
	MOV #8, TEMP_PAREDE
	MOV #56, PRIMEIRO_DIGITO
	JMP TESTE_SET_WALL
	ATALHO_PAREDE_9:
	CMP 65528, #57
	BEQ PAREDE_9
	JMP RETORNO_PAREDE_9
	PAREDE_9:
	MOV #9, TEMP_PAREDE
	MOV #57, PRIMEIRO_DIGITO
	JMP TESTE_SET_WALL
	
	;Se nenhum desses casos, indica um erro desconhecido (caso o primeiro caractere seja diferente de 0 a 9, e tenha passado pela verificacao acima)
	JMP ERRO_DESCONHECIDO
	
	ATALHO_PAREDE_0ALGO:
		CMP 65528, #48
		BEQ PAREDE_0ALGO
		JMP RETORNO_PAREDE_0ALGO
	PAREDE_0ALGO:
		MOV #0, TEMP_PAREDE ;O numero da parede vai ser 0X
		MOV #48, PRIMEIRO_DIGITO
		JMP ANALISA_CARACTERE_2
	ATALHO_PAREDE_10ALGO:
		CMP 65528, #49
		BEQ PAREDE_10ALGO
		JMP RETORNO_PAREDE_10ALGO	
	PAREDE_10ALGO:
		MOV #10, TEMP_PAREDE ;O numero da parede vai ser 1X
		JMP ANALISA_CARACTERE_2
	ATALHO_PAREDE_20ALGO:
		CMP 65528, #50
		BEQ PAREDE_20ALGO
		JMP RETORNO_PAREDE_20ALGO
	PAREDE_20ALGO:
		MOV #20, TEMP_PAREDE
		JMP ANALISA_CARACTERE_2
	ATALHO_PAREDE_30ALGO:
		CMP 65528, #51
		BEQ PAREDE_30ALGO
		JMP RETORNO_PAREDE_30ALGO
	PAREDE_30ALGO:
		MOV #30, TEMP_PAREDE
		JMP ANALISA_CARACTERE_2
	ATALHO_PAREDE_40ALGO:
		CMP 65528, #52
		BEQ PAREDE_40ALGO
		JMP RETORNO_PAREDE_40ALGO
	PAREDE_40ALGO:
		MOV #40, TEMP_PAREDE
		JMP ANALISA_CARACTERE_2
	ATALHO_PAREDE_50ALGO:
		CMP 65528, #53
		BEQ PAREDE_50ALGO
		JMP RETORNO_PAREDE_50ALGO
	PAREDE_50ALGO:
		MOV #50, TEMP_PAREDE
		JMP ANALISA_CARACTERE_2
	ATALHO_PAREDE_60ALGO:
		CMP 65528, #54
		BEQ PAREDE_60ALGO
		JMP RETORNO_PAREDE_60ALGO
	PAREDE_60ALGO:
		MOV #60, TEMP_PAREDE
		JMP ANALISA_CARACTERE_2
	ATALHO_PAREDE_70ALGO:
		CMP 65528, #55
		BEQ PAREDE_70ALGO
		JMP RETORNO_PAREDE_70ALGO
	PAREDE_70ALGO:
		MOV #70, TEMP_PAREDE
		JMP ANALISA_CARACTERE_2
	ATALHO_PAREDE_80ALGO:
		CMP 65528, #56
		BEQ PAREDE_80ALGO
		JMP RETORNO_PAREDE_80ALGO
	PAREDE_80ALGO:
		MOV #80, TEMP_PAREDE
		JMP ANALISA_CARACTERE_2
	ATALHO_PAREDE_90ALGO:
		CMP 65528, #57
		BEQ PAREDE_90ALGO
		JMP RETORNO_PAREDE_90ALGO
	PAREDE_90ALGO:
		MOV #90, TEMP_PAREDE
		JMP ANALISA_CARACTERE_2
	
	ANALISA_CARACTERE_2:
		;Analisa o segundo caractere que foi digitado (é certo que esse é um numero) - Funcionou :D
			;posicao do segundo caractere 65529
			;PROBLEMAS SE O CARACTERE 2 FOR UM 5!!!!!!!!!!!
		;Se houver digito dois, escreve no ultimo endereco do processador, como ficou o resultado da soma da dezena e da unidade
		
		MOV 65529, AUX1 ;Move o segundo digito para uma variavel
		MOV AUX1, SEGUNDO_DIGITO
		SUB #48, AUX1
		ADD AUX1, TEMP_PAREDE
		;JMP TESTE_PASSOU
		JMP TESTE_SET_WALL

	HLT
	
TESTE_SET_WALL:
	CLR R0
	CLR R1
	MOV TEMP_PAREDE, R0 ;Nao usar hashtag na frente disso aqui
	MOV #setwall, R5
	JSR R7, _SISTEMA
	
	JMP ATALHO_ERRO_PAREDE
	RETORNO_ERRO_PAREDE:
	
	MOV R0, LARGURA
	MOV R1, ALTURA
	
	JSR R7, DISPLAY_CLS ;Limpa a tela
	MOV #MSG4_1, R0
	MOV #putmsg, R5
	JSR R7, _SISTEMA
	
	;JMP TESTE_PASSOU
	MOV PRIMEIRO_DIGITO, 65507 ;Printa o numero da parede no display (1 Byte porque faltou tempo =/)
	MOV SEGUNDO_DIGITO, 65508

	MOV #MSG4_2, R0
	MOV #putmsg, R5
	JSR R7, _SISTEMA
	MOV #MSG4_3, R0
	MOV #putmsg, R5
	JSR R7, _SISTEMA
	
	CMP #10, LARGURA
	BLT LARGURA_DOISDIGITOS
	JMP LARGURA_UMDIGITO
	
	LARGURA_DOISDIGITOS:
	HLT ;NAO DEU TEMPO DE PREPARAR PARA DOIS DIGITOS!!!!!!!!!!!!!!!!!!!!!
	JMP CHECA_ALTURA
	
	
	LARGURA_UMDIGITO:
	MOV #48, 65520 ;Move um zero para o inicio do numero (Ex.: 0X)
	MOV LARGURA, LARGURA_ASCII
	ADD #48, LARGURA_ASCII
	MOV LARGURA_ASCII, 65521 ;Move o numero em si para o campo de largura
	JMP CHECA_ALTURA
	
	CHECA_ALTURA:
	CMP #10, ALTURA
	BLT ALTURA_UMDIGITO
	JMP ALTURA_DOISDIGITOS
	
	ALTURA_DOISDIGITOS:
	HLT ;NAO DEU TEMPO DE PREPARAR PARA DOIS DIGITOS!!!!!!!!!!!!!!!!!!!!!
	
	ALTURA_UMDIGITO:
	MOV #48, 65532 ;Move um zero para o inicio do numero (Ex.: 0X)
	MOV ALTURA, ALTURA_ASCII
	MOV ALTURA_ASCII, 65533 ;Move o numero em si para o campo de largura
	JMP AGUARDA_COMANDO_1
	HLT
	
AGUARDA_COMANDO_1:
	MOV #getchar, R5
	JSR R7, _SISTEMA
	
	JMP ATALHO_PEDE_NUM_PAREDE
	RETORNO_PEDE_NUM_PAREDE:
	
	CMP R0, #ENTER
	BEQ CAMERA_ANALISE
	JMP AGUARDA_COMANDO_1
	HLT
	
CAMERA_ANALISE:
	MOV #move00, R5
	JSR R7, _SISTEMA
	
	MOV #0, COORDENADA_X
	MOV #0, COORDENADA_y
	
	JSR R7, DISPLAY_CLS
	MOV #MSG_COORDENADAS, R0
	MOV #putmsg, R5
	JSR R7, _SISTEMA
	
	MOV #48, 65513 ;Insere zero no valor da coordenada inicial
	MOV #48, 65515 ;Insere zero no valor da coordenada inicial
	
	JSR R7, DIGITOU_ALGO ;Se a pessoa digitou um C
	
	MOV COORDENADA_X, R0
	MOV COORDENADA_y, R1
	MOV #read, R5
	JSR R7, _SISTEMA
	
	JSR R7, INFORMA_ESTADO
	
	HLT ;Nao consegui terminar o programa a tempo =/

;ORDEM DE LEITURA
;		1 2 3
;		4 5 6
;		7 8 9

CALCULA_LADRILHOS_PROXIMOS:
	A_POS1:
	MOV #-1, R0
	MOV #-1, R1
	MOV #read, R5
	JSR R7, _SISTEMA
	CMP #0, R0
	HLT
	
INCREMENTA_BONS:
	INC BONS
	RTS R7
	
INCREMENTA_DANIF:
	INC DANIF
	RTS R7
	
INCREMENTA_VAZIO:
	INC VAZIO
	RTS R7

INFORMA_ESTADO:
	CMP R0, #0
	BEQ AUX_SEVAZIO
	JMP AUX_COMP2
	AUX_SEVAZIO:
	MOV #MSG_VAZIO, R0
	MOV #putmsg, R5
	JSR R7, _SISTEMA
	JMP END_AUXX
	
	AUX_COMP2:
	CMP R0, #1
	BEQ AUX_SEBOM
	JMP AUX_COMP3
	AUX_SEBOM:
	MOV #MSG_BOM, R0
	MOV #putmsg, R5
	JSR R7, _SISTEMA
	JMP END_AUXX
	
	AUX_COMP3:
	MOV #MSG_DANIFICADO, R0
	MOV #putmsg, R5
	JSR R7, _SISTEMA

	END_AUXX:
	RTS R7

DIGITOU_ALGO:
	MOV #kbhit, R5
	JSR R7, _SISTEMA
	CMP #0, R0
	BNE DIGITADO
	JMP END_AUX
	
	DIGITADO:
	JMP ATALHO2_PEDE_NUM_PAREDE ;Verifica se foi digitado um C
	RETORNO2_PEDE_NUM_PAREDE:
	JMP END_AUX
	
	END_AUX:
	RTS R7
	
ATALHO_ERRO_PAREDE:
CMP R0, #hFFFF
BEQ ERRO_PAREDE
JMP RETORNO_ERRO_PAREDE

ATALHO_CORRIGE_CARACTERE:
CMP R0, #BACKSPACE
BEQ CORRIGE_CARACTERE
JMP RETORNO_CORRIGE_CARACTERE
CORRIGE_CARACTERE: ;***********NAO ESTA ACEITANDO UM SEGUNDO BACKSPACE!!!!!!!!!!!!!!!!!!!!!
	;Decrementa uma posicao
	DEC R1 
	MOV R1, R0
	MOV #setcursor, R5
	JSR R7, _SISTEMA
	
	CLR 65499
	CLR 65498
	JMP ATALHO_SE_POS_INICIAL
	RETORNO_SE_POS_INICIAL:
	
	;Coloca um espaco no caractere anterior - e incrementa uma posicao
	MOV #32, R0
	MOV #putchar, R5
	JSR R7, _SISTEMA 
	
	;Decrementa uma posicao
	DEC R1 
	MOV R1, R0
	MOV #setcursor, R5
	JSR R7, _SISTEMA

	CLR 65499
	CLR 65498
	JMP LOOP_DIGITA_PAREDE

VERIFICA_ERRO_PAREDE:
	CMP 65531, #32
	BNE ERRO_PAREDE
	CMP 65532, #32
	BNE ERRO_PAREDE
	CMP 65533, #32
	BNE ERRO_PAREDE
	CMP 65534, #32
	BNE ERRO_PAREDE
	CMP 65535, #32 
	BNE ERRO_PAREDE
	RTS R7
	

ERRO_PAREDE:
	JSR R7, DISPLAY_CLS
	MOV #MSG_ERRO_PAREDE, R0
	MOV #putmsg, R5
	JSR R7, _SISTEMA
	
	ERRO_PAREDE_WAIT_ENTER:
	MOV #getchar, R5
	JSR R7, _SISTEMA
	CMP #ENTER, R0 ;Verifica se a tecla enter foi digitada
	BNE ERRO_PAREDE_WAIT_ENTER ;Se qualquer tecla que NAO for o enter for digitada, inicia o loop novamente pedindo uma nova tecla
	JMP PEDE_NUM_PAREDE ;Se a tecla enter for digitada, pede um novo numero de parede

ATALHO_FIM_PROGRAMA:
	CMP 65528, #32
	BEQ FIM_PROGRAMA ;Se nao houver nenhum caractere na primeira e na segunda casa
	JMP RETORNO_FIM_PROGRAMA
FIM_PROGRAMA:
	JSR R7, DISPLAY_CLS
	MOV #MSG_FIM_PROGRAMA, R0
	MOV #putmsg, R5
	JSR R7, _SISTEMA
	HLT ;Fim de execucao do programa, solicitado pelo usuario

ERRO_DESCONHECIDO:
	JSR R7, DISPLAY_CLS
	MOV #MSG_TESTE, R0
	MOV #putmsg, R5
	JSR R7, _SISTEMA
	HLT
	
DISPLAY_CLS: ;Subrotina para deixar o display vazio - apenas com espacos
    MOV #32, 65500             ; limpa LED 00
    MOV #32, 65501             ; limpa LED 01
    MOV #32, 65502             ; limpa LED 02
    MOV #32, 65503             ; limpa LED 03
    MOV #32, 65504             ; limpa LED 04
    MOV #32, 65505             ; limpa LED 05
    MOV #32, 65506             ; limpa LED 06
    MOV #32, 65507             ; limpa LED 07
    MOV #32, 65508             ; limpa LED 08
    MOV #32, 65509             ; limpa LED 09
    MOV #32, 65510             ; limpa LED 10
    MOV #32, 65511             ; limpa LED 11
    MOV #32, 65512             ; limpa LED 12
    MOV #32, 65513             ; limpa LED 13
    MOV #32, 65514             ; limpa LED 14
    MOV #32, 65515             ; limpa LED 15
    MOV #32, 65516             ; limpa LED 16
    MOV #32, 65517             ; limpa LED 17
    MOV #32, 65518             ; limpa LED 18
    MOV #32, 65519             ; limpa LED 19
    MOV #32, 65520             ; limpa LED 20
    MOV #32, 65521             ; limpa LED 21
    MOV #32, 65522             ; limpa LED 22
    MOV #32, 65523             ; limpa LED 23
    MOV #32, 65524             ; limpa LED 24
    MOV #32, 65525             ; limpa LED 25
    MOV #32, 65526             ; limpa LED 26
    MOV #32, 65527             ; limpa LED 27
    MOV #32, 65528             ; limpa LED 28
    MOV #32, 65529             ; limpa LED 29
    MOV #32, 65530             ; limpa LED 30
    MOV #32, 65531             ; limpa LED 31
    MOV #32, 65532             ; limpa LED 32
    MOV #32, 65533             ; limpa LED 33
    MOV #32, 65534             ; limpa LED 34
    MOV #32, 65535             ; limpa LED 35
	MOV #0, R0
	MOV #setcursor, R5
	JSR R7, _SISTEMA
    RTS R7                ; Retorna para o ponto original em que a funcao foi chamada


ZERA_VARIAVEIS:
	MOV #0, AUX0
	MOV #0, AUX1
	MOV #0, TEMP_PAREDE
	MOV #0, SEGUNDO_DIGITO
	RTS R7
TESTE_PASSOU:
	JSR R7, DISPLAY_CLS
	MOV #MSG_COORDENADAS, R0
	MOV #putmsg, R5
	JSR R7, _SISTEMA
	MOV TEMP_PAREDE, 65535
	HLT


;============Problemas encontrados ao longo do desenvolvimento do programa===============;
;-O kernel nao permite que a mesma funcao seja chamada duas vezes seguidas - Erro constatado com a funcao putmsg
;-As rotinas definidas nas contantes nao se mostraram funcionais com o comando DB, atingi o resultado esperado apenas quando usei o comando EQU
;-Jumps condicionais deixam de funcionar apos certo ponto no programa, quando o limite de 8 bits é estourado, é necessario usar um jump para outro jump, nesse caso
;-Foi considerada a existencia de 100 paredes, de 00 a 99!!!
;-Para resolver o problema com os jumps condicionais foram utilizados "atalhos"
;-Problemas foram encontrados ao repetir o backspace, apos corrigir mais de um caractere
;-Caractere ESPACO em ASCII é reconhecido como identico ao caractere "a", o que pode resultar em erros em testes muito especificos (como uma parede 99a - onde a parede 99 é considerada)
;===========Constantes utilizadas - definidas pelo kernel=============;
ORG 15000 
kbhit:		EQU	0
getchar:	EQU	1
putchar:	EQU	2
putmsg:		EQU	3
setcursor:	EQU	4
setwall:	EQU	5
read:		EQU	6
move00:		EQU	7
move:		EQU	8
moving:		EQU	9
getcamera:	EQU	10
_SISTEMA:	EQU	h0080
	;Caracteres ASCII
ENTER:		EQU 13
BACKSPACE:	EQU 8
SPACE:		EQU 20
ASCII_ZERO:		EQU 48
ASCII_UM:		EQU 49
ASCII_DOIS:		EQU 50
ASCII_TRES:		EQU 51
ASCII_QUATRO: 	EQU	52
ASCII_CINCO:	EQU 53
ASCII_SEIS:		EQU 54
ASCII_SETE:		EQU 55
ASCII_OITO:		EQU 56
ASCII_NOVE:		EQU 57
ASCII_DESVIO:	EQU 48
;=========== Variaveis utilizadas ao longo do programa ===================;
AUX0: DB 0
AUX1: DB 0
TEMP_PAREDE: EQU 0
PRIMEIRO_DIGITO: EQU 48
SEGUNDO_DIGITO: EQU 32
LARGURA: 		EQU 0
ALTURA: 		EQU 0
LARGURA_ASCII: EQU 0
ALTURA_ASCII: EQU 0
BONS: EQU 0
DANIF: EQU 0
VAZIO: EQU 0
COORDENADA_X: EQU 0
COORDENADA_y: EQU 0


;=========== MENSAGENS UTILIZADAS (display de 36 caracteres) =============;
MSG_IDENTIFICACAO:	dab 'Autor:Giordano Souza - Cartao:308054',0 ;Mensagem de identificacao exibida no inicio do programa
MSG_ASKWALL: 		dab 'Informe o numero da parede: ',0 ;Mensagem de solicitacao para uma nova parede
MSG_ERRO_PAREDE:	dab 'Numero da parede invalido!',0
MSG_FIM_PROGRAMA:	dab 'Encerrando programa... Ate logo!',0
MSG4_1:				dab 'Parede   ',0
MSG4_2:				dab ', Largura=   ',0
MSG4_3:				dab ', Altura=   ',0
MSG_COORDENADAS:	dab 'Coordenadas ( , ) - ',0
MSG_DANIFICADO:		dab 'Danificado!',0
MSG_BOM:			dab 'Bom',0
MSG_VAZIO:			dab 'Vazio',0
MSG_RESULTADO:		dab 'Bons: xx, danifs: yy, vazios: zz.',0
MSG_TESTE:			dab 'ERRO DESCONHECIDO! CHECAR CODIGO!',0
MSG_TESTE_OK:		dab 'considerou espaco',0
MSG_PASSOU:			dab 'PASSOU POR AKI',0